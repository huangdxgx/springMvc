<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">


        <!--********springMvc配置**********-->
    <!--自动扫描 src下所有java类-->
    <context:component-scan base-package="com.dongxi.goods.*" />
    <!--开启对静态资源文件的访问-->
    <!--比如一些html，css，img等文件-->
    <mvc:default-servlet-handler/>
    <!--开启springMvc注解-->
    <mvc:annotation-driven>
        <!--配置注解的json返回-->
        <mvc:message-converters register-defaults="true">
            <!--@ResponseBody乱码问题，将StringHttpMessageConverter的默认编码设置为UTF-8，在action方法里面不再需要设置编码-->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"></constructor-arg>
            </bean>
            <!--配置Fastjson支持，在action方法里面不再需要设置print（jsonArry），把return null，改为return jsonArray，返回一个json-->
            <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/html;charset=UTF-8</value>
                        <value>application/json</value>
                    </list>
                </property>
                <property name="features">
                    <list>
                        <!--输出key时是否使用双引号，默认为true-->
                        <value>WriteMapNullValue</value>
                        <!--是否输出值为null的字段默认为false-->
                        <value>QuoteFieldNames</value>
                        <!--字符类型字段如果为null，输出“”，而非null-->
                        <value> WriteNullStringAsEmpty</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <mvc:view-controller path="/home/account" view-name="/home/account" />

    <!--文件上传-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
        <!--设置上传文件的最大尺寸为5MB-->
        <property name="maxUploadSize">
            <!-- 上传文件大小限制为5M，5*1024*1024 -->
            <value>5242880</value>
        </property>
        <property name="maxInMemorySize" value="4096"/>
    </bean>
    <!--定义跳转的文件的前后缀，视图模式配置-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--这里的配置我的理解是自动给后面的action的方法return的字符串加上前缀和后缀，变成一个可用的url地址，不在需要struts..xml文件配置action的result跳转的页面-->
       <!-- <property name="prefix" value="/"/>
        <property name="suffix" value=".jsp"/>-->
        <!--配置拦截器只拦截action方法，jsp页面不拦截，但是如果要想设置jsp也不能访问，把jsp页面放在/WEB-INF路径下，只能可以通过action方法-->
         <property name="prefix" value="/WEB-INF/home/" />
        <property name="suffix" value=".jsp"/>
        <!--配置mvc拦截器-->
       <!-- <mvc:interceptors>
            &lt;!&ndash;  直接在mvc：interceptor下定义的拦截器是拦截全局的		&ndash;&gt;
            &lt;!&ndash;  <bean id="MyInterceptor" class="com.four.goods.interceptor.MyInterceptor"></bean>  &ndash;&gt;
            <mvc:interceptor>
                &lt;!&ndash;在mvc：interceptor定义的拦截器是局部的,即是拦截局部的action，也可以设置某个action不拦截&ndash;&gt;
                <mvc:mapping path="/user/*.action"/>
                <mvc:mapping path="/product/*.action"/>
                <mvc:exclude-mapping path="/user/httpInfo.acion"/>
                <bean id="interceptorUtil" class="com.dongxi.goods.interceptor.interceptorUtil"/>
            </mvc:interceptor>
        </mvc:interceptors>-->
    </bean>
</beans>