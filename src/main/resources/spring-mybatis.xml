<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!--自动扫描 src下所有java类-->
    <context:component-scan base-package="com.dongxi.goods.*" />
    <!-- 引入配置文件 -->
        <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
            <property name="location" value="classpath:jdbc.properties"/>
        </bean>
    <!--配置dbcp数据源-->
        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
            <property name="driverClassName" value="${jdbc.driver}"/><!--对应的jdbc.properties的jdbc.driver-->
            <property name="url" value="${jdbc.url}"/><!--对应的jdbc.properties的jdbc.url-->
            <property name="username" value="${jdbc.username}"/><!--对应的jdbc.properties的jdbc.username-->
            <property name="password" value="${jdbc.password}"/><!--对应的jdbc.properties的jdbc.password-->
            <!--连接池启动时的初始值-->
            <property name="initialSize" value="${ds.initialSize}"/><!--对应的jdbc.properties的ds.initialSize-->
            <!-- 连接池的最大值 -->
            <property name="maxActive" value="${ds.maxActive}"/><!--对应的jdbc.properties的ds.maxActive-->
            <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请一些连接，以避免洪峰来时再申请而造成的性能开销 -->
            <property name="minIdle" value="${ds.minIdle}"/>
            <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
            <property name="maxIdle" value="${ds.maxIdle}"/>
            <property name="maxWait" value="${ds.maxWait}"/><!-- 获取连接最大等待时间 -->
        </bean>
    <!--配置sessionFactory-->
    <!--spring和mybatis完美整合，不需要mybatis的配置映射文件-->
    <bean id="sqlsessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/><!--注入数据源-->
        <!--自动扫描mapping.xml文件--><!--为你每个实体类配mapping.xml-->
        <property name="mapperLocations">
            <list>
              <value>classpath:com/dongxi/**/dao/mapper_xml/*Dao.xml</value>
            </list>
        </property>
        <!--配置分页-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <!-- 设置数据库类型 Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库-->
                        <value>dialect=mysql</value><!--定义方言-->
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dongxi..*.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlsessionFactory"/>
    </bean>
<!--配置事务管理 通知--><!-- 对dataSource 数据源进行事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 配置事务传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--增删改开启事务-->
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="dele*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <!--查询不需要开启事务-->
            <tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="select*" read-only="true" propagation="NOT_SUPPORTED"/>
            <tx:method name="query*" read-only="true" propagation="NOT_SUPPORTED"/>
            <!--对其他方法，使用默认的事务管理-->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <!--配置切面-->
    <aop:config>
        <aop:pointcut id="serviceMethods" expression="execution(* com.dongxi.goods..service.*.*(..))"/>
        <aop:advisor pointcut-ref="serviceMethods" advice-ref="txAdvice"/>
    </aop:config>
    <!--启用对事务的注解-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>