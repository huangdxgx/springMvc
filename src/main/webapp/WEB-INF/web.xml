<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>Archetype Created Web Application</display-name>
    <!-- 指定的spring配置文件，交由spring接管 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:spring-mybatis.xml</param-value>
    </context-param>
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath*:log4j.properties</param-value>
    </context-param>
        <!-- 项目中使用Spring时，applicationContext.xml配置文件中并没有BeanFactory，要想在业务层中的class文件中直接引用Spring容器管理的bean可通过以下方式-->
        <!--1、在web.xml配置监听器ContextLoaderListener。ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，就会默认执行它实现的方法。
  在ContextLoaderListener中关联了ContextLoader这个类，所以整个加载配置过程由ContextLoader来完成。-->
        <listener>
            <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
        </listener>
    <!-- 防止spring内存溢出监听器，比如quartz -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>


    <!-- Spring编码过滤器 -->
    <!--Spring框架给我们提供过滤器CharacterEncodingFilter
这个过滤器就是针对于每次浏览器请求进行过滤的，然后再其之上添加了父类没有的功能即处理字符编码。
其中encoding用来设置编码格式，forceEncoding用来设置是否理会 request.getCharacterEncoding()方法，设置为true则强制覆盖之前的编码格式。-->
    <filter>
        <filter-name>spring-encoder</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <!-- 强制执行转码 -->
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>spring-encoder</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>



    <!-- SpringMVC核心配置 -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <!-- springmvc核心控制器 -->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:spring-mvc.xml</param-value>
        </init-param>

        <!-- servlet的加载顺序，1的优先级最高，1代表容器启动的时候就加载 -->
        <load-on-startup>1</load-on-startup>
    </servlet>


<servlet>
    <servlet-name>goto</servlet-name>
    <jsp-file>/WEB-INF/home/account.jsp</jsp-file>--要跳转到的页面
</servlet>
    <servlet-mapping>
        <servlet-name>goto</servlet-name>
        <url-pattern>/account</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>gotoRegister</servlet-name>
        <jsp-file>/WEB-INF/home/register.jsp</jsp-file>
    </servlet>
    <servlet-mapping>
        <servlet-name>gotoRegister</servlet-name>
        <url-pattern>/register</url-pattern>
    </servlet-mapping>
<servlet>
    <servlet-name>header</servlet-name>
    <jsp-file>/WEB-INF/home/header.jsp</jsp-file>
</servlet>
    <servlet-mapping>
        <servlet-name>header</servlet-name>
        <url-pattern>/header</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>footer</servlet-name>
        <jsp-file>/WEB-INF/home/footer.jsp</jsp-file>
    </servlet>
    <servlet-mapping>
        <servlet-name>footer</servlet-name>
        <url-pattern>/footer</url-pattern>
    </servlet-mapping>

   <!-- <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>-->
    <servlet-mapping>
        <servlet-name >default </servlet-name >
        <url-pattern >*.js</url-pattern>
    </servlet-mapping >
    <servlet-mapping >
        <servlet-name >default </servlet-name >
        <url-pattern >*.css</url-pattern>
    </servlet-mapping >
    <servlet-mapping >
        <servlet-name >default </servlet-name >
        <url-pattern >*.htm</url-pattern>
    </servlet-mapping >
    <servlet-mapping >
        <servlet-name >default </servlet-name >
        <url-pattern >*.gif</url-pattern>
    </servlet-mapping >
    <servlet-mapping>
        <!-- 配置拦截器只拦截action方法，jsp页面不拦截，但是可以把jsp页面放在/WEB-INF路径下，可以通过action访问 -->
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!--welcome pages-->
        <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
        </welcome-file-list>
        <!--当系统出现404错误，跳转到页面NoPage.html-->
        <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/NoPage.html</location>
        </error-page>
        <!--当系统出现java.lang.NullPointerException，跳转到页面error.html-->
        <error-page>
        <exception-type>java.lang.NullPointerException</exception-type>
        <location>/WEB-INF/error.jsp</location>
        </error-page>
        <!--会话超时配置，单位分钟-->
        <session-config>
        <session-timeout>30</session-timeout>
        </session-config>
    <!-- 配置spring创建上下文环境的监听器 -->
   <!-- <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>-->
        </web-app>